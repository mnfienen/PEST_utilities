# Plot pilot point identifiabilities in arc map;
# Also does observation leverage results
# from shapefile generated by identpar.py
# requires arcpy

__author__ = 'aleaf'

import xml.etree.ElementTree as ET
import os
import arcpy
import shutil
import fiona

try:
    infile = sys.argv[1]
except:
    infile = 'Postproc_input.XML'

# get inputs from XML input file
infile = 'Postproc_input.XML'
try:
    inpardat = ET.parse(infile)
except:
    raise IOError("Cannot open {0}!".format(infile))

inpars = inpardat.getroot()

path = inpars.findall('.//path')[0].text
GIS_folder = inpars.findall('.//GIS_folder')[0].text
basename = inpars.findall('.//pest_basename')[0].text
# path to identpar shapefile (also where output will be written)
#path = os.path.join(path, GIS_folder)
base_mxd = inpars.findall('.//base_mxd')[0].text
ident_shp = '{0}_PPident.shp'.format(basename) # shapefile generated by identpar.py
symbology = inpars.findall('.//identifiabilities')[0].text # pre-made symbology layer for plotting the points
plot_k = True # True/False to plot K-arrays
out_mxd = os.path.join(path, GIS_folder, '{0}_Ident_Lev.mxd'.format(basename))

# plot K settings
plot_logK = True
prjfile = inpars.findall('.//PRJfile')[0].text
raster_symbology = inpars.findall('.//k_rasters')[0].text

# observation leverage settings
lev_shp = os.path.join(path, GIS_folder, 'badriver_svda_inf.shp')
heads_symbology = inpars.findall('.//leverage_heads')[0].text
streams_symbology = inpars.findall('.//leverage_streams')[0].text
lev_symbologies = {'piezometer': heads_symbology, 'gage': streams_symbology}

# functions
def add_feature(df, filename, symbology, TOCposition):
    # make a layer
    newlayer = arcpy.mapping.Layer(filename)
    print 'adding {0}'.format(filename)
    # apply the symbology
    arcpy.ApplySymbologyFromLayer_management(newlayer, os.path.join(os.getcwd(), symbology))
    # add new layer to current dataframe, at the top of the table of contents
    arcpy.mapping.AddLayer(df, newlayer, TOCposition)


def add_raster(dataframe, raster, symbology_layer):

    layer_pointer = arcpy.mapping.Layer(raster)
    # set symbology from a pre-existing lyr file
    arcpy.ApplySymbologyFromLayer_management(layer_pointer, symbology_layer)
    # add to mxd
    arcpy.mapping.AddLayer(dataframe, layer_pointer, "BOTTOM")


print 'set the workspace location...'
#startdir = os.getcwd()
shutil.copyfile(base_mxd, os.path.join(path, os.path.split(base_mxd)[-1])) # for some reason had to do this after changing the path, otherwise MXD was getting corrupted
shutil.copyfile(raster_symbology, os.path.join(path, GIS_folder, os.path.split(raster_symbology)[-1]))
shutil.copyfile(symbology, os.path.join(path, GIS_folder, os.path.split(symbology)[-1]))
shutil.copyfile(heads_symbology, os.path.join(path, GIS_folder, os.path.split(heads_symbology)[-1]))
shutil.copyfile(streams_symbology, os.path.join(path, GIS_folder, os.path.split(streams_symbology)[-1]))
raster_symbology = os.path.join(path, GIS_folder, os.path.split(raster_symbology)[-1])
symbology = os.path.join(path, GIS_folder, os.path.split(symbology)[-1])
heads_symbology = os.path.join(path, GIS_folder, os.path.split(heads_symbology)[-1])
streams_symbology = os.path.join(path, GIS_folder, os.path.split(streams_symbology)[-1])

arcpy.env.workspace = path
arcpy.env.overwriteOutput = True
arcpy.CheckOutExtension("Spatial")

print 'open {0}'.format(os.path.join(path, os.path.split(base_mxd)[-1]))
mxd = arcpy.mapping.MapDocument(os.path.join(path, os.path.split(base_mxd)[-1]))
df = arcpy.mapping.ListDataFrames(mxd, "*")[0]

# plot observation leverage results
# implement separate symbology for heads and streams
# first get list of observation types
if os.path.isfile(lev_shp):
    with fiona.collection(lev_shp, 'r') as layer:
        types = list(set([element['properties']['type'] for element in layer]))

    # now add each type individually
    arcpy.MakeFeatureLayer_management(os.path.join(path, GIS_folder, lev_shp), "All_types")
    for type in types:
        thequery = """ "type" = '{0}' """.format(type)
        selection = arcpy.SelectLayerByAttribute_management("All_types", "NEW_SELECTION", thequery)
        layername = "Leverage_{0}s".format(type)
        arcpy.MakeFeatureLayer_management(selection, '{0}s_leverage'.format(type))
        add_feature(df, '{0}s_leverage'.format(type), lev_symbologies[type], "TOP")
else:
    print "skipping leverage, {0} not found.".format(lev_shp)

arcpy.MakeFeatureLayer_management(os.path.join(path, GIS_folder, ident_shp), "All_layers")
#newlayer = arcpy.mapping.Layer(ident_shp)
for dir in ['kz', 'kh']:
    for layer in [4, 3, 1]:

        # select pilot points for current layer and direction
        thequery = """ "layer" = {0} AND "dir" = '{1}' """.format(layer, dir)
        selection = arcpy.SelectLayerByAttribute_management("All_layers", "NEW_SELECTION", thequery)

        # make another layer with this subset
        layername = os.path.join(path, GIS_folder, "Layer{0}_{1}_ident.shp".format(layer, dir))
        arcpy.CopyFeatures_management(selection, layername)

        # add to MXD
        add_feature(df, layername, symbology, "TOP")

# This should really be re-worked into a library so there is one only one set of code!
if plot_k:
    ascii_Kfiles = [f for f in os.listdir(os.path.join(path, GIS_folder)) if '_k' in f and '.asc' in f]

    for f in ascii_Kfiles:
        rastername = os.path.join(path, GIS_folder, "l"+f.split('.')[0][-4:])
        if not os.path.isdir(rastername):
            #convert ascii grid file to arc raster
            arcpy.ASCIIToRaster_conversion(os.path.join(path, GIS_folder, f), rastername, "FLOAT")
            arcpy.DefineProjection_management(rastername, prjfile)

        # need the path for raster below because it references a raster object
        add_raster(df, rastername, raster_symbology)

        if plot_logK:
            rastername = os.path.join(path, GIS_folder, '%slog_%s' %(rastername[0:3], rastername[3:]))
            if os.path.isfile(rastername):
                add_raster(df, rastername, raster_symbology)

# turn all layers off
for lyr in arcpy.mapping.ListLayers(mxd):
    lyr.visible = False
print 'saving as {0}'.format(out_mxd)
mxd.saveACopy(out_mxd) # saves new mxd using the specifed root name
del mxd
os.remove(os.path.join(path, os.path.split(base_mxd)[-1]))
print "Done!"